{"version":3,"sources":["components/lib.js","components/TaskAdd.js","components/TaskList.js","components/TasksDone.js","components/App.js","index.js"],"names":["getDate","timestamp","dateReverse","dateObj","Date","parseInt","Y","getFullYear","m","getMonth","d","H","getHours","M","getMinutes","S","getSeconds","TaskAdd","dateDeadLine","handleInputTaskName","handleInputDate","handleInputIsImportant","handleSubmit","taskName","isImportant","deadLine","handleClick","dateNow","onSubmit","htmlFor","type","id","placeholder","onChange","value","checked","min","TaskList","props","tasks","filter","el","done","sort","a","b","toLowerCase","map","task","date","key","className","onClick","handleTaskDone","handleTaskDelete","length","TasksDone","tasksDone","doneDate","SingleTask","singleTask","doTill","tasksDoneJSX","tab","App","useState","setTaskName","setIsImportant","setdeadLine","setTasks","e","eventId","target","confirmAlert","title","message","buttons","label","tasksFiltered","getTime","preventDefault","alert","newTask","prevTasks","taskMapped","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.87eabc12.chunk.js","sourcesContent":["const getDate = (timestamp, dateReverse) => {\r\n    const dateObj = (timestamp) ? new Date(parseInt(timestamp)) : new Date();\r\n    const Y = dateObj.getFullYear();\r\n    const m = dateObj.getMonth() + 1;\r\n    const d = dateObj.getDate();\r\n    const H = dateObj.getHours();\r\n    const M = dateObj.getMinutes();\r\n    const S = dateObj.getSeconds();\r\n    let date;\r\n    if (dateReverse)\r\n        date = Y + '-' + ((m < 10) ? '0' + m : m) + '-' + ((d < 10) ? '0' + d : d);\r\n    else\r\n        date = ((d < 10) ? '0' + d : d) + '-' + ((m < 10) ? '0' + m : m) + '-' + Y + ' ';\r\n\r\n    const hours = ((H < 10) ? '0' + H : H) + ':' + ((M < 10) ? '0' + M : M) + ':' + ((S < 10) ? '0' + S : S);\r\n    return [date, hours];\r\n}\r\nexport { getDate };","import React from 'react';\r\nimport '../style/TaskAdd.css';\r\nimport { getDate } from './lib';\r\n\r\nconst TaskAdd = ({\r\n    handleInputTaskName,\r\n    handleInputDate,\r\n    handleInputIsImportant,\r\n    handleSubmit,\r\n    taskName,\r\n    isImportant,\r\n    deadLine,\r\n    handleClick,\r\n}) => {\r\n    const [dateNow] = getDate(null, true);\r\n    let dateDeadLine;\r\n    if (deadLine)\r\n        [dateDeadLine] = getDate(deadLine, true);\r\n    else\r\n        dateDeadLine = ''\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={handleSubmit}>\r\n                <label htmlFor='taskName'>Task name</label>\r\n                <input type=\"text\" id='taskName' placeholder='tap your new task..' onChange={handleInputTaskName} value={taskName} />\r\n                <input type='checkbox' id='isImportant' onChange={handleInputIsImportant} checked={isImportant} ></input>\r\n                <label htmlFor='checkbox' >Priority</label><br></br>\r\n                <label htmlFor='dead-line-time' >Dead line time: </label>\r\n                <input type='date' min={dateNow} id='deadLine' onChange={handleInputDate} value={dateDeadLine}></input>\r\n                <button type='submit'>Add this task</button>\r\n            </form>\r\n\r\n        </>\r\n    )\r\n}\r\nexport default TaskAdd;","import React from 'react';\r\nimport '../style/TaskList.css';\r\nimport { getDate } from './lib';\r\n\r\nconst TaskList = (props) => {\r\n\r\n    let tasks = props.tasks.filter(el => el.done === false);\r\n    tasks.sort((a, b) => {\r\n        if (a.taskName.toLowerCase() > b.taskName.toLowerCase()) return 1;\r\n        if (a.taskName.toLowerCase() < b.taskName.toLowerCase()) return -1;\r\n        return 0;\r\n    });\r\n    tasks = tasks.map(task => {\r\n        const [date] = getDate(task.deadLine)\r\n        return (\r\n            <div\r\n                key={task.id}\r\n                className='tasks'>\r\n                <span className={task.isImportant ? \"task-priority\" : null}>\r\n                    {task.taskName}\r\n                </span> - to {date}\r\n                <button id={parseInt(task.id)} onClick={props.handleTaskDone}>Done</button>\r\n                <button id={parseInt(task.id)} onClick={props.handleTaskDelete}>X</button>\r\n            </div>\r\n\r\n        )\r\n    })\r\n    return (\r\n        <div id='taskList-wrap'>\r\n            {(tasks.length > 0) ? tasks : <h3>No active tasks</h3>}\r\n        </div >\r\n    )\r\n}\r\nexport default TaskList;\r\n","import React from 'react';\r\nimport '../style/TasksDone.css';\r\nimport { getDate } from './lib';\r\n\r\n\r\nconst TasksDone = (props) => {\r\n    const tasksDone = props.tasks.filter(el => el.done === true);\r\n    tasksDone.sort((a, b) => {\r\n        if (a.doneDate < b.doneDate) return 1;\r\n        if (a.doneDate > b.doneDate) return -1;\r\n        return 0;\r\n    })\r\n    const SingleTask = ({ singleTask }) => {\r\n        const [doTill] = getDate(singleTask.deadLine);\r\n        return (\r\n            <li>\r\n                <strong>{singleTask.taskName}</strong> (do till: {doTill})<br></br>\r\n                done on {getDate(singleTask.doneDate)}\r\n                <button\r\n                    id={singleTask.id}\r\n                    onClick={props.handleTaskDelete}\r\n                >X</button>\r\n            </li>\r\n        )\r\n    }\r\n    let tasksDoneJSX = tasksDone.map(el => <SingleTask key={el.id} singleTask={el} />)\r\n\r\n    return (\r\n        <div>\r\n            <ul>\r\n                {(tasksDone.length > 0) ?\r\n                    <>\r\n                        <h3>Tasks Done ({tasksDone.length})</h3>\r\n                        <div>{tasksDoneJSX}</div>\r\n                    </>\r\n                    : 'No tasks done yet'}\r\n            </ul>\r\n        </div >\r\n    )\r\n}\r\nexport default TasksDone;\r\n","import React, { useState } from 'react';\nimport '../style/App.css';\nimport TaskAdd from './TaskAdd';\nimport TaskList from './TaskList';\nimport TasksDone from './TasksDone';\nimport { confirmAlert } from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css';\n\nconst tab = [\n  {\n    id: 2,\n    taskName: 'Paint garden fence',\n    isImportant: false,\n    deadLine: \"1580385851000\",\n    done: false\n  },\n  {\n    id: 0,\n    taskName: 'Buy presents for family',\n    isImportant: false,\n    deadLine: \"1576745131000\",\n    done: false\n  },\n  {\n    id: 1,\n    taskName: 'Book fly tickets',\n    isImportant: true,\n    deadLine: \"1577698951000\",\n    done: false\n  },\n  {\n    id: 3,\n    taskName: 'Go to barber',\n    isImportant: false,\n    deadLine: \"1580385841000\",\n    done: false\n  }];\n\nconst App = () => {\n  const [taskName, setTaskName] = useState('');\n  const [isImportant, setIsImportant] = useState(false);\n  const [deadLine, setdeadLine] = useState('');\n  const [tasks, setTasks] = useState(tab);\n\n  const handleTaskDelete = (e) => {\n    const eventId = parseInt(e.target.id);\n\n    confirmAlert({\n      title: 'Delete item',\n      message: 'Do you really want to delete this task ?',\n      buttons: [\n        {\n          label: 'Yes',\n          onClick: () => {\n            let tasksFiltered = tasks.filter(el => el.id !== eventId);\n            setTasks(tasksFiltered)\n          }\n        },\n        {\n          label: 'No',\n          onClick: () => null\n        }\n      ]\n    });\n  }\n\n  const handleInputTaskName = (e) => {\n    setTaskName(e.target.value)\n  }\n\n  const handleInputDate = (e) => {\n    let date = new Date(e.target.value);\n    let timestamp = date.getTime(date);\n    setdeadLine(timestamp);\n  }\n\n  const handleInputIsImportant = (e) => {\n    setIsImportant(e.target.checked)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!taskName) {\n      alert('Please fill task name first');\n      return null\n    }\n    if (!deadLine) {\n      alert('Please fill dead line date first');\n      return null;\n    }\n    let count = tasks.length;\n    let newTask = {\n      id: count,\n      taskName: taskName,\n      isImportant: isImportant,\n      deadLine: deadLine,\n      done: false,\n    };\n    setTasks(prevTasks => {\n      return [...prevTasks, newTask]\n    });\n\n    setTaskName('');\n    setIsImportant(false);\n    setdeadLine('');\n  }\n\n  const handleTaskDone = (e) => {\n    let taskMapped = tasks.map(el => {\n      if (el.id === parseInt(e.target.id)) {\n        el.done = true;\n        const done = new Date();\n        el.doneDate = done.getTime();\n      }\n      return el\n    })\n    setTasks(taskMapped)\n  }\n\n  return (\n    <>\n      <TaskAdd\n        handleInputTaskName={handleInputTaskName}\n        handleInputDate={handleInputDate}\n        handleInputIsImportant={handleInputIsImportant}\n        handleSubmit={handleSubmit}\n        isImportant={isImportant}\n        taskName={taskName}\n        deadLine={deadLine}\n      />\n      <hr></hr>\n      <TaskList\n        tasks={tasks}\n        handleTaskDone={handleTaskDone}\n        handleTaskDelete={handleTaskDelete} />\n      <hr></hr>\n      <TasksDone\n        tasks={tasks}\n        handleTaskDelete={handleTaskDelete}\n      />\n    </>\n  )\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));"],"sourceRoot":""}